// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_PRISMA_URL") // uses connection pooling
    directUrl         = env("DATABASE_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
    id         String    @id @default(cuid())
    firstName  String?
    lastName   String?
    username   String    @unique
    password   String
    list       List?
    recipes    Recipe[]
    chats      Chat[]
    filter     Filter[]
    onboarding Feature[] @default([])
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
}

// Simple enum for features
enum Feature {
    generateChat
    recentRecipes
    chat
    chatFilters
    lists
    savedRecipes
}

model Chat {
    id        String           @id @default(cuid())
    userId    String
    user      User             @relation(fields: [userId], references: [id])
    messages  Message[]
    filters   FiltersOnChats[]
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt
}

model Filter {
    id        String           @id @default(cuid())
    name      String
    user      User             @relation(fields: [userId], references: [id])
    userId    String
    chats     FiltersOnChats[]
    checked   Boolean          @default(true)
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt
}

model FiltersOnChats {
    filter   Filter @relation(fields: [filterId], references: [id])
    filterId String
    chat     Chat   @relation(fields: [chatId], references: [id])
    chatId   String

    @@id([filterId, chatId])
}

model Message {
    id        String              @id @default(cuid())
    chat      Chat                @relation(fields: [chatId], references: [id])
    chatId    String
    content   String
    role      Role
    recipes   RecipesOnMessages[]
    createdAt DateTime            @default(now())
    updatedAt DateTime            @updatedAt
}

enum Role {
    system
    user
    assistant
    data
}

model Recipe {
    id          String  @id @default(cuid())
    user        User?   @relation(fields: [userId], references: [id])
    userId      String?
    name        String
    description String?
    imgUrl      String?
    author      String?
    address     String?

    // NEW: normalized name for dedupe/search (optional)
    nameNorm        String?  @db.Text
    // NEW: lightweight classification to power filters & embeddings
    cuisine         String? // e.g. "mexican", "thai"
    course          String? // e.g. "main", "side", "dessert"
    dietTags        String[] @default([]) // e.g. ["vegan", "gluten-free"]
    flavorTags      String[] @default([]) // e.g. ["spicy","umami"]
    mainIngredients String[] @default([]) // e.g. ["chicken","tomato"]
    techniques      String[] @default([]) // e.g. ["grill","braise"]

    // existing step/ingredient relations
    instructions Instruction[]
    ingredients  Ingredient[]

    // existing string times (kept for backward compatibility)
    prepTime    String?
    cookTime    String?
    // NEW: numeric times for better filtering/sorting (optional)
    prepMinutes Int?
    cookMinutes Int?

    // existing
    messages     RecipesOnMessages[]
    saved        Boolean             @default(false)
    notes        String              @default("")
    lastViewedAt DateTime            @default(now())
    createdAt    DateTime            @default(now())
    updatedAt    DateTime            @updatedAt

    // NEW: 1–1 vector row (optional)
    vector RecipeVector?

    @@index([userId, nameNorm])
    @@index([userId, cuisine])
    @@index([userId, course])
}

model RecipeVector {
    // 1–1 with Recipe
    recipeId String @id
    recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

    userId    String // duplicate for fast multitenant filters
    signature String // compact text you embed (title/tags/desc)

    // Prisma doesn't have a native vector type yet; use Unsupported
    embedding Unsupported("vector") // e.g. vector(1536)

    updatedAt DateTime @updatedAt

    @@index([userId])
}

model RecipesOnMessages {
    recipe    Recipe   @relation(fields: [recipeId], references: [id])
    recipeId  String
    message   Message  @relation(fields: [messageId], references: [id])
    messageId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([recipeId, messageId])
}

model Instruction {
    id          String @id @default(cuid())
    description String
    recipe      Recipe @relation(fields: [recipeId], references: [id])
    recipeId    String
}

model Ingredient {
    id       String  @id @default(cuid())
    name     String
    recipe   Recipe? @relation(fields: [recipeId], references: [id])
    recipeId String?
    list     List?   @relation(fields: [listId], references: [id])
    listId   String?
    checked  Boolean @default(false)
}

model List {
    id          String       @id @default(cuid())
    user        User         @relation(fields: [userId], references: [id])
    userId      String       @unique
    ingredients Ingredient[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}
