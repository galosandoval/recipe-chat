// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_PRISMA_URL") // uses connection pooling
    directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

model User {
    id        String   @id @default(cuid())
    firstName String?
    lastName  String?
    username  String   @unique
    password  String
    list      List?
    recipes   Recipe[]
    chats     Chat[]
    filter    Filter[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Chat {
    id        String    @id @default(cuid())
    userId    String
    user      User      @relation(fields: [userId], references: [id])
    messages  Message[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Filter {
    id        String   @id @default(cuid())
    name      String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    checked   Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Message {
    id        String   @id @default(cuid())
    chat      Chat     @relation(fields: [chatId], references: [id])
    chatId    String
    content   String
    role      Role
    recipe    Recipe?  @relation(fields: [recipeId], references: [id])
    recipeId  String?  @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Role {
    system
    user
    assistant
    function
    data
    tool
}

model Recipe {
    id           String        @id @default(cuid())
    user         User?         @relation(fields: [userId], references: [id])
    userId       String?
    description  String?
    name         String
    imgUrl       String?
    author       String?
    address      String?
    instructions Instruction[]
    ingredients  Ingredient[]
    prepTime     String?
    cookTime     String?
    message      Message?
    categories   String[]      @default([])
    notes        String        @default("")
    lastViewedAt DateTime      @default(now())
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
}

model Instruction {
    id          String @id @default(cuid())
    description String
    recipe      Recipe @relation(fields: [recipeId], references: [id])
    recipeId    String
}

model Ingredient {
    id       String  @id @default(cuid())
    name     String
    recipe   Recipe? @relation(fields: [recipeId], references: [id])
    recipeId String?
    list     List?   @relation(fields: [listId], references: [id])
    listId   String?
    checked  Boolean @default(false)
}

model List {
    id          String       @id @default(cuid())
    user        User         @relation(fields: [userId], references: [id])
    userId      String       @unique
    ingredients Ingredient[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}
